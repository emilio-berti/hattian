// Generated by rstantools.  Do not edit by hand.

/*
    hattian is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    hattian is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with hattian.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_yeakel_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 22> locations_array__ =
  {" (found before start of program)",
  " (in 'yeakel', line 7, column 2 to column 10)",
  " (in 'yeakel', line 8, column 2 to column 10)",
  " (in 'yeakel', line 9, column 2 to column 10)",
  " (in 'yeakel', line 20, column 2 to column 20)",
  " (in 'yeakel', line 22, column 11 to column 12)",
  " (in 'yeakel', line 22, column 4 to column 16)",
  " (in 'yeakel', line 24, column 6 to column 50)",
  " (in 'yeakel', line 25, column 6 to column 56)",
  " (in 'yeakel', line 23, column 19 to line 26, column 5)",
  " (in 'yeakel', line 23, column 4 to line 26, column 5)",
  " (in 'yeakel', line 20, column 21 to line 27, column 3)",
  " (in 'yeakel', line 13, column 2 to column 21)",
  " (in 'yeakel', line 14, column 2 to column 21)",
  " (in 'yeakel', line 15, column 2 to column 21)",
  " (in 'yeakel', line 17, column 2 to column 57)",
  " (in 'yeakel', line 2, column 2 to column 8)",
  " (in 'yeakel', line 3, column 8 to column 9)",
  " (in 'yeakel', line 3, column 2 to column 37)",
  " (in 'yeakel', line 4, column 9 to column 10)",
  " (in 'yeakel', line 4, column 2 to column 15)",
  " (in 'yeakel', line 20, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_yeakel final : public model_base_crtp<model_yeakel> {
private:
  int N;
  std::vector<int> link;
  Eigen::Matrix<double,-1,1> mr_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> mr{nullptr, 0};
public:
  ~model_yeakel() {}
  model_yeakel(stan::io::var_context& context__, unsigned int
               random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_yeakel_namespace::model_yeakel";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 16;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 16;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 17;
      stan::math::validate_non_negative_index("link", "N", N);
      current_statement__ = 18;
      context__.validate_dims("data initialization", "link", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      link = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 18;
      link = context__.vals_i("link");
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "link", link, 0);
      current_statement__ = 18;
      stan::math::check_less_or_equal(function__, "link", link, 1);
      current_statement__ = 19;
      stan::math::validate_non_negative_index("mr", "N", N);
      current_statement__ = 20;
      context__.validate_dims("data initialization", "mr", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      mr_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&mr) Eigen::Map<Eigen::Matrix<double,-1,1>>(mr_data__.data(), N);
      {
        std::vector<local_scalar_t__> mr_flat__;
        current_statement__ = 20;
        mr_flat__ = context__.vals_r("mr");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 20;
          stan::model::assign(mr, mr_flat__[(pos__ - 1)],
            "assigning variable mr", stan::model::index_uni(sym1__));
          current_statement__ = 20;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 21;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_yeakel";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_yeakel_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ a1 = DUMMY_VAR__;
      current_statement__ = 1;
      a1 = in__.template read<local_scalar_t__>();
      local_scalar_t__ a2 = DUMMY_VAR__;
      current_statement__ = 2;
      a2 = in__.template read<local_scalar_t__>();
      local_scalar_t__ a3 = DUMMY_VAR__;
      current_statement__ = 3;
      a3 = in__.template read<local_scalar_t__>();
      {
        current_statement__ = 12;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(a1, 0, 10));
        current_statement__ = 13;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(a2, 0, 10));
        current_statement__ = 14;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(a3, 0, 10));
        current_statement__ = 15;
        lp_accum__.add(stan::math::bernoulli_logit_lpmf<propto__>(link,
                         stan::math::add(
                           stan::math::add(a1, stan::math::multiply(a2, mr)),
                           stan::math::multiply(a3, stan::math::pow(mr, 2)))));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_yeakel_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double a1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      a1 = in__.template read<local_scalar_t__>();
      double a2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      a2 = in__.template read<local_scalar_t__>();
      double a3 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      a3 = in__.template read<local_scalar_t__>();
      out__.write(a1);
      out__.write(a2);
      out__.write(a3);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      {
        current_statement__ = 5;
        stan::math::validate_non_negative_index("p", "N", N);
        Eigen::Matrix<double,-1,1> p =
          Eigen::Matrix<double,-1,1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 10;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 7;
          stan::model::assign(p, ((a1 + (a2 *
            stan::model::rvalue(mr, "mr", stan::model::index_uni(i)))) + (a3
            *
            stan::math::pow(
              stan::model::rvalue(mr, "mr", stan::model::index_uni(i)), 2))),
            "assigning variable p", stan::model::index_uni(i));
          current_statement__ = 8;
          stan::model::assign(log_lik,
            stan::math::bernoulli_logit_lpmf<false>(
              stan::model::rvalue(link, "link", stan::model::index_uni(i)),
              stan::model::rvalue(p, "p", stan::model::index_uni(i))),
            "assigning variable log_lik", stan::model::index_uni(i));
        }
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ a1 = DUMMY_VAR__;
      current_statement__ = 1;
      a1 = in__.read<local_scalar_t__>();
      out__.write(a1);
      local_scalar_t__ a2 = DUMMY_VAR__;
      current_statement__ = 2;
      a2 = in__.read<local_scalar_t__>();
      out__.write(a2);
      local_scalar_t__ a3 = DUMMY_VAR__;
      current_statement__ = 3;
      a3 = in__.read<local_scalar_t__>();
      out__.write(a3);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "a1", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "a2", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "a3", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ a1 = DUMMY_VAR__;
      current_statement__ = 1;
      a1 = context__.vals_r("a1")[(1 - 1)];
      out__.write(a1);
      local_scalar_t__ a2 = DUMMY_VAR__;
      current_statement__ = 2;
      a2 = context__.vals_r("a2")[(1 - 1)];
      out__.write(a2);
      local_scalar_t__ a3 = DUMMY_VAR__;
      current_statement__ = 3;
      a3 = context__.vals_r("a3")[(1 - 1)];
      out__.write(a3);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"a1", "a2", "a3"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "a1");
    param_names__.emplace_back(std::string() + "a2");
    param_names__.emplace_back(std::string() + "a3");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "a1");
    param_names__.emplace_back(std::string() + "a2");
    param_names__.emplace_back(std::string() + "a3");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"a1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"a1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_yeakel_namespace::model_yeakel;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_yeakel_namespace::profiles__;
}
#endif
#endif
